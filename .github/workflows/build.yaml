name: Build Training

on:
  pull_request: 
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  HELM_RELEASE: pr-${{ github.event.pull_request.number }}
  HELM_NAME: dagger-techlab-puzzle
  NAMESPACE: pitc-cicd-dagger-techlab-test
  TRAINING_VERSION: ${{ github.sha }}
  PR_ENV_URL: https://dagger-techlab-pr-${{ github.event.pull_request.number }}.ocp.cloudscale.puzzle.ch

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up npm for linting
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'
      -
        name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      -
        name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-modules-
      -
        name: Lint Markdown
        run: npm ci && npm run mdlint

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      -
        name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      -
        name: Save Docker image as artifact
        run: |
          docker save ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }} -o image.tar
      -
        name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: pr-image
          path: image.tar

  push:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: pr-image
      - name: Load Docker image
        run: docker load -i image.tar
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Docker image
        run: |
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: push
    steps:
      -
        name: Checkout Repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            helm-chart
          sparse-checkout-cone-mode: false
          fetch-depth: 0
      -
        name: 'Install Helm'
        uses: azure/setup-helm@v4
        with:
          version: 'latest'
      -
        name: Install Kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'
      -
        name: Create KUBECONFIG
        env:
          KUBE_CONFIG: '${{ secrets.KUBECONFIG_TEST_AV2 }}'
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBE_CONFIG" > $HOME/.kube/config
      -
        name: Deploy Helm Release
        run: |
          helm upgrade $HELM_RELEASE acend-training-chart --install --wait \
            --kubeconfig $HOME/.kube/config \
            --namespace=$NAMESPACE \
            --set=app.name=$HELM_RELEASE \
            --set=app.version=$TRAINING_VERSION \
            --repo=https://acend.github.io/helm-charts/ \
            --values=helm-chart/values.yaml \
            --atomic
      -
        name: Redeploy Deployments
        run: |
          kubectl rollout restart deployment/${HELM_RELEASE}-${HELM_NAME} \
            --kubeconfig $HOME/.kube/config \
            --namespace $NAMESPACE

  comment:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      -
        name: Comment PR Environments in PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          message: |
            ðŸš€ PR Environment: [Open Deployment](${{ env.PR_ENV_URL }})
