name: Build Training

permissions:
  contents: read
  packages: write
  id-token: write
  pull-requests: write

on:
  pull_request:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  HELM_RELEASE: pr-${{ github.event.pull_request.number }}
  HELM_NAME: dagger-techlab-puzzle
  NAMESPACE: pitc-cicd-dagger-techlab-test
  TRAINING_VERSION: ${{ github.sha }}
  PR_ENV_URL: https://dagger-techlab-pr-${{ github.event.pull_request.number }}.ocp.cloudscale.puzzle.ch

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up npm for linting
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-modules-
      - name: Lint Markdown
        run: npm ci && npm run mdlint

  build_and_push:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker pr image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.8.2
        with:
          cosign-release: 'v2.2.4'
      - name: Sign Docker image with cosign
        env:
          TAG: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: |
          COSIGN_EXPERIMENTAL=1 cosign sign --yes ${TAG}@${DIGEST}
      - name: Verify Docker image with cosign
        env:
          TAG: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: bash ./scripts/verify_cosign.sh

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            helm-chart
            scripts
          sparse-checkout-cone-mode: false
          fetch-depth: 0
      - name: 'Install Helm'
        uses: azure/setup-helm@v4
        with:
          version: 'latest'
      - name: Install Kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'
      - name: Create KUBECONFIG
        env:
          KUBE_CONFIG: '${{ secrets.KUBECONFIG_TEST_AV2 }}'
        run: bash ./scripts/create_kubeconfig.sh
      - name: Deploy Helm Release
        run: bash ./scripts/deploy_helm_release.sh
      - name: Redeploy Deployments
        run: bash ./scripts/redeploy_deployment.sh

  comment:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Comment PR Environments in PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          message: |
            üöÄ PR Environment: [Open Deployment](${{ env.PR_ENV_URL }})
            üñãÔ∏è Image Digest: `${{ steps.build-and-push.outputs.digest }}`